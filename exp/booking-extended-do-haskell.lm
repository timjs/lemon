
-- Data ------------------------------------------------------------------------


data Nationality
  = Dutch
  | British
  | German


data Passenger = Passenger
  { first_name :: String
  , last_name :: String
  , nationality :: Nationality
  , age :: Int
  }


data Flight
  = ToAmsterdam
  | ToLondon
  | ToBerlin


type Row = Int
type Chair = Char
data Seat = Seat
  { row :: Row
  , chair :: Chair
  }


data Booking = Booking
  { passengers :: List Passenger
  , flight :: Flight
  , seats :: List Seat
  }



-- Stores ----------------------------------------------------------------------


free_seat_store :: Store (List Seat)
free_seat_store =
  store [ Seat { row, chair } | row <- 1...4, chair <- `A...`D ]



-- Checks ----------------------------------------------------------------------


valid :: Check Passenger
valid (Passenger p) =
  p.age >= 0


adult :: Check Passenger
adult (Passenger p) =
  p.age >= 18



-- Tasks -----------------------------------------------------------------------


enter_passengers :: {} -> Task { passengers :: List Passenger }
enter_passengers {} = do
  { value: passengers } <- enter "Passenger details" {}
  on "Continue" when all valid passengers && any adult passengers && not (empty passengers) do
    done


enter_flight :: {} -> Task { flight :: Flight }
enter_flight {} = do
  { value: flight } <- enter "Flight details" {}
  on "Continue" do
    done


choose_seats :: { amount :: Int } -> Task { seats :: List Seat }
choose_seats { amount } = do
  { value: seats } <- select "Pick a Seat" [] free_seat_store {}
  on "Continue" when length seats == amount do
    free_seat_store <<- remove_elements seats
    done


make_booking :: {} -> Task { booking :: Booking }
make_booking {} = do
  par
    enter_flight {}
    done
  and
    enter_passengers {}
    done
  { seats } <- choose_seats { amount: length passengers }
  view "Booking" { booking: Booking { passengers, flight, seats } }


run :: {} -> Task { booking :: Booking }
run {} = do
  par
    watch "Free seats" free_seat_store
  and
    make_booking
  done


data List a
  = Cons { head :: a, tail :: List a }
  | Nil
